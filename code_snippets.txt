ConsoleApp
1) Build - show no exe.
	- run with command: dotnet .\ConsoleApp.dll
2) Build - VS - get self contained
	- change to "Release"
	- edit csproj:
	<RuntimeIdentifiers>win10-x64;osx.10.11-x64</RuntimeIdentifiers>
	- Build Solution
	- Setup publish
		- Choose traget
	- Error - Visual Studio 2017 bug
3) Build - CLI - self contained
	- dotnet publish --self-contained -r win10-x64 -c Release
	
	
Console transistion:
1) Install Microsoft.AspNetCore.All
2) Program.cs:
  static void Main(string[] args)
        {
            Console.WriteLine("Hello World!");
            BuildWebHost(args).Run();
        }

        public static IWebHost BuildWebHost(string[] args) =>
            WebHost.CreateDefaultBuilder(args)
                .UseStartup<Startup>()
                .Build();
				
3) Startup.cs
public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddRouting();
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IHostingEnvironment env)
        {
            if (env.IsDevelopment()) {
                app.UseDeveloperExceptionPage();
            }

            app.Run(async (context) => {
                await context.Response.WriteAsync("Hello World!");
            });
        }
    }
			
			
Middleware:
1) Easy Use/Run/Map
app.Use(async (context, next) => {
                
                await next();

                string redirect = context.Response.Headers["X-Redirect"];
                if (!string.IsNullOrWhiteSpace(redirect)) {
                    context.Response.Headers.Add("X-nonsense", "pure nonsense");
                }
            });

            app.Map("/Home/About", (app2) => {
                app2.Use(async (context, next) => {
                    
                    await next();

                    context.Response.Headers.Add("X-onlyAbout", "this the about page");
                });
            });
			
Settings
 - 2.0
	- Setting files
		.ConfigureAppConfiguration((builderContext, config) =>
                {
                    IHostingEnvironment env = builderContext.HostingEnvironment;

                    config.AddJsonFile("configSettings.json", optional: false);
                })
 - 1.0
	- see template
	
	
 -Options
 <div class="row">
    <div class="col-md-12">
        <p>My Name: @DataService.GetName()</p>
        <p>Settings Option1: @ViewData["DS_Option1"]</p>
        <p>Settings Option2: @ViewData["DS_Option2"]</p>
        <p>Settings Change On Save Option1: @ViewData["DS_Option_Change1"]</p>
        <p>Settings Change On Save Option2: @ViewData["DS_Option_Change2"]</p>
    </div>
</div>
 
 
 IIS integration
1) Install IIS
2) Install .NET Core Windows Server Hosting bundle  - https://aka.ms/dotnetcore-2-windowshosting
3) Configure 
	- 2.0
		- Add Website
		- App Pool -> Basic-> No Manged Code
	- 1.1
		- same as 2.0
		- code needs the following:
			-.UseKestrel().UseIISIntegration()
 
	
az webapp create --resource-group DotNetCoreTraining --plan CoreTrainingLinux --name WebCoreTrainingLinux --deployment-container-image-name microsoft/dotnetcore	
